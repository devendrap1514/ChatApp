continue
receivable.users.include?(sender)
receivable.users.methods
receivable.users.exist?
receivable.users.exist?(sender)
receivable.users
receivable.members.exist?(sender)
continue
User.none << message.receivable
User.none.or([message.receivable])
User.none.or(message.receivable)
User.none.ormessage.receivable
message.receivable
continue
n
users = User.none.or()
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).map { |message| message.receivable }
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).map { |message| message.receiver }
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).map { |message| message }
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).map { |message|  }
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type)
urrent_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type)
continue
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type)
continue
n
@chat_users
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type)@chat_users
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type)
continue
current_user.received_messages
@chat_users.uniq
@chat_users.uniq.count
@chat_users.uniq
@chat_users.count
@chat_users
continue
get_chat_users
methods
continue
User.where("email ILIKE '%devendrap@shriffle.com%'")
User.where('email ILIKE %?%', "#{params[:query]}")
User.where('email ILIKE %?%', params[:query])
params
User.where('email ILIKE ?', "%#{params[:query]}%")
User.where("email ILIKE %devendrap@shriffle.com%")
User.where('email ILIKE ?', "%devendrap@shriffle.com%")
User.where('email ILIKE ?', "%#{params[:query]}%")
User.where('email ILIKE ?', "%#{restaurant_name}%")
User.where("email = devendrap@shriffle.com")
User.where("email ILIKE %devendrap@shriffle.com%")
User.where("email ILIKE devendrap@shriffle.com")
User.where("email ILIKE ?", params[:query])
@users
n
params[:query]
params
continue
params
query
continue
@users
continue
n
@users
continue
ug
n
continue
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).receivables
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).receivable_ids
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).receivable
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_ty
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).messages
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).first
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).methods
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type).users
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type)
continue
@current_user.groups
continue
@receiver.messages
n
continue
@receiver.messages
n
@receiver
continue
n
continue
"hello".constantize
ActiveRecord::Base.descendants.map(&:name).include?(class_name)
class_name.constantize
ActiveRecord::Base.descendants.map(&:name).include?(class_name)
class_name
ActiveRecord::Base.descendants.map(&:name).include?(class_name)
n
ActiveRecord::Base.descendants.map(&:name).include?(class_name)
continue
@messages
continue
class_name.present? && ActiveRecord::Base.descendants.map(&:name).include?(class_name)
n
class_name.constantize
continue
class_name.constantize
n
continue
class_name.constantize
n
class_name.constantize
ActiveRecord::Base.descendants.map(&:name).include?("User")
ActiveRecord::Base.descendants.map(&:name).include?("UserGroup")
ActiveRecord::Base.descendants.map(&:name).include?(class_name)
continue
n
continue
class_name.constantize
ActiveRecord::Base.descendants.map(&:name).include?("Group")
ActiveRecord::Base.descendants.map(&:name).include?("User")
ActiveRecord::Base.descendants.map(&:name).include?(class_name)
class_name.present?
ActiveRecord::Base.descendants.map(&:name).include?(class_name)
class_name
n
continue
n
output
is_params_present
is_params_present, output
continue
n
params[:receivable_id]
class_name.constantize
n
class_name
n
continue
n
@chat_users
continue
current_user.received_messages.select(:sender_id).group(:sender_id)
@chat_users
n
@chat_users
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type).group(:receivable_id, :receivable_type)
continue
@chat_users
continue
message.receivable
message
continue
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivable_type)
current_user.send_messages.where(receivable_type: "User").select(:receivable_id, :receivalbe_type)
current_user.send_messages.where(receivable_type: "User").select(:receivable_id).group(:receivable_id).map { |m| m  }.receiva
current_user.send_messages.where(receivable_type: "User").select(:receivable_id).group(:receivable_id).map { |m| m  }
current_user.send_messages.where(receivable_type: "User").select(:receivable_id).group(:receivable_id).all
current_user.send_messages.where(receivable_type: "User").select(:receivable_id).group(:receivable_id)
current_user.send_messages.where(receivable_type: "User").select(:receivable_id)current_user.send_messages.where(receivable_type: "User").select(:receivable_id).group(:receivable_id)
current_user.send_messages.where(receivable_type: "User").select(:receivable_id)
current_user.send_messages.where(receivable_type: "User")
current_user.send_messages
Message.none
current_user.send_messages.all
current_user.send_messages
current_user
Message.all
message
message.content
message.sender
message.receivable
message.methods
message.receivable
continue
n
continue
n
creator
continue
receivable.class.name == "User"
receivable.class.name
receivable.class
receivable.class_name
receivable.methods
receivable.class_name
receivable.class
receivable.name
receivable.name == "User"
receivable.class_name == "User"
receivable.class == "User"
receivable.class
receivable.receivable_type
receivable.id
receivable
continue
params[:receivable_type].present?
params[:receivable_type].present? || ActiveRecord::Base.descendants.map(&:name).include?(params[:receivable_type])
continue
ActiveRecord::Base.descendants.map(&:name).include?(params[:receivable_type])params[:receivable_type].present? || ActiveRecord::Base.descendants.map(&:name).include?(params[:receivable_type])
ActiveRecord::Base.descendants.map(&:name).include?(params[:receivable_type])
continue
ActiveRecord::Base.methods
ActiveRecord::Base
ActiveRecord::Base.descendants
ActiveRecord::Base.descendants.map(&:name)
ActiveRecord::Base.descendants.map(&:name).include?('User')
ActiveRecord::Base.descendants.map(&:name).include?('ModelName')
SessionsController.model_name
User.model_name
User.methods
SessionsController.methods
SessionsController.name
SessionsController.class.class
SessionsController.class
SessionsController.parent
SessionsController.base_class
.base_class
User.methods
User.parent
User.class
User.type
defined? SessionsController
defined? Message
defined? User
defined?(params[:receivable_type])
params[:receivable_type]
params[:receivable]
continue
JSON.parse(request.body.read)
continue
request.body.read
continue
JSON.parse(request.body.read)
request.body.read
continue
n
receiver
sender
continue
n
receiver
sender
continue
object
continue
n
params
continue
n
methods
responce
object
continue
current_user
continue
n
